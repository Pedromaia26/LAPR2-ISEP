@startuml
actor Administrator as Adm
participant ":RegisterEmployeeUI" as Interface
participant ":RegisterEmployeeController" as Controller
participant ":Company" as Company
participant ":RolesMapper" as RolesMapper
participant "empDto: EmployeeDto" as EmployeeDto
participant "role:OrgRole" as OrgRole


autonumber
activate Adm
Adm -> Interface: starts registering a new employee
activate Interface
Interface -> Controller: IRolesDto = getRoles()
activate Controller
Controller -> Company: lRoles = getRoles()
activate Company
deactivate Company
Controller -> RolesMapper: lRolesDto = toDTO(lRoles)
activate RolesMapper
deactivate RolesMapper
deactivate Controller
Interface --> Adm: ask to select the employee role
deactivate Interface
Adm -> Interface: selects the intended role
activate Interface
Interface --> Adm: request data (name, address, phoneNumber, emailAddress, socCode)
opt role = Specialist Doctor
    Interface --> Adm: request data(doctorIndexNumber)
end
deactivate Interface


Adm -> Interface: types requested data
activate Interface
Interface --> Controller: createEmployee(empDto)
activate Controller
Controller -> Company: emp = createEmployee(empDto)
activate Company
Company -> EmployeeDto: roleId = getRoleId()
activate EmployeeDto
deactivate EmployeeDto
Company -> Company: role = getRoleById(roleId)
activate Company
deactivate Company
Company -> EmployeeDto: id = getId()
activate EmployeeDto
deactivate EmployeeDto
Company -> EmployeeDto: name = getName()
activate EmployeeDto
deactivate EmployeeDto
Company -> EmployeeDto: adress = getAdress()
activate EmployeeDto
deactivate EmployeeDto
Company -> EmployeeDto: phoneNumber = getphoneNumber()
activate EmployeeDto
deactivate EmployeeDto
Company -> EmployeeDto: emailAdress = getEmailAdress()
activate EmployeeDto
deactivate EmployeeDto
Company -> EmployeeDto: socCode = getsocCode()
activate EmployeeDto
deactivate EmployeeDto
alt role != SpecialistDoctor
    Company -> OrgRole: emp = createEmployee(role, id, name, address, phoneNumber, emailAddress, socCode)
    activate OrgRole
else
    Company -> EmployeeDto: doctorIndexNumber = getDoctorIndexNumber()
    activate EmployeeDto
    deactivate EmployeeDto
    Company -> OrgRole: emp = createEmployee(role, id, name, address, phoneNumber, emailAddress, socCode, doctorIndexNumber)
end
alt role != SpecialistDoctor
    create "emp:Employee" as Employee
    OrgRole -> Employee: create(role, id, name, address, phoneNumber, emailAddress, socCode)
else
    create "emp:SpecialistDoctor" as Doctor
    OrgRole -> Doctor:create(role, id, name, address, phoneNumber, emailAddress, socCode, doctorIndexNumber)
end
deactivate OrgRole
deactivate Company
deactivate Controller

Interface -> Adm: shows the data and requests a confirmation
deactivate Interface
Adm -> Interface: confirms the data

activate Interface
Interface -> Controller: saveEmployee()
activate Controller
Controller -> Company: saveEmployee(emp)
activate Company
Company -> Company: validateEmployee(emp)
activate Company
deactivate Company
Company -> Company: addEmployee(emp)
activate Company
deactivate Company
deactivate Company
deactivate Controller
Interface -> Adm: informs operation success
deactivate Interface
deactivate Adm
@enduml